// Mocks generated by Mockito 5.2.0 from annotations
// in restaurant/test/utils/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:convert' as _i10;
import 'dart:typed_data' as _i11;

import 'package:connectivity_plus/connectivity_plus.dart' as _i8;
import 'package:connectivity_plus_platform_interface/connectivity_plus_platform_interface.dart'
    as _i9;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:restaurant/data/api/api_service.dart' as _i3;
import 'package:restaurant/data/model/add_review.dart' as _i7;
import 'package:restaurant/data/model/restaurant.dart' as _i5;
import 'package:restaurant/data/model/review.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeClient_0 extends _i1.Fake implements _i2.Client {}

class _FakeResponse_1 extends _i1.Fake implements _i2.Response {}

class _FakeStreamedResponse_2 extends _i1.Fake implements _i2.StreamedResponse {
}

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i3.ApiService {
  MockApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get client => (super.noSuchMethod(Invocation.getter(#client),
      returnValue: _FakeClient_0()) as _i2.Client);
  @override
  _i4.Future<List<_i5.Restaurant>> listRestaurant({String? keywordSearch}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #listRestaurant, [], {#keywordSearch: keywordSearch}),
              returnValue:
                  Future<List<_i5.Restaurant>>.value(<_i5.Restaurant>[]))
          as _i4.Future<List<_i5.Restaurant>>);
  @override
  _i4.Future<_i5.Restaurant?> detailRestaurant(String? id) =>
      (super.noSuchMethod(Invocation.method(#detailRestaurant, [id]),
              returnValue: Future<_i5.Restaurant?>.value())
          as _i4.Future<_i5.Restaurant?>);
  @override
  _i4.Future<List<_i6.Review>> reviewRestaurant(_i7.AddReview? data) =>
      (super.noSuchMethod(Invocation.method(#reviewRestaurant, [data]),
              returnValue: Future<List<_i6.Review>>.value(<_i6.Review>[]))
          as _i4.Future<List<_i6.Review>>);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i8.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i9.ConnectivityResult> get onConnectivityChanged =>
      (super.noSuchMethod(Invocation.getter(#onConnectivityChanged),
              returnValue: Stream<_i9.ConnectivityResult>.empty())
          as _i4.Stream<_i9.ConnectivityResult>);
  @override
  _i4.Future<_i9.ConnectivityResult> checkConnectivity() =>
      (super.noSuchMethod(Invocation.method(#checkConnectivity, []),
              returnValue: Future<_i9.ConnectivityResult>.value(
                  _i9.ConnectivityResult.bluetooth))
          as _i4.Future<_i9.ConnectivityResult>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i2.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_1()))
          as _i4.Future<_i2.Response>);
  @override
  _i4.Future<_i2.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_1()))
          as _i4.Future<_i2.Response>);
  @override
  _i4.Future<_i2.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i10.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_1()))
          as _i4.Future<_i2.Response>);
  @override
  _i4.Future<_i2.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i10.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_1()))
          as _i4.Future<_i2.Response>);
  @override
  _i4.Future<_i2.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i10.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_1()))
          as _i4.Future<_i2.Response>);
  @override
  _i4.Future<_i2.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i10.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_1()))
          as _i4.Future<_i2.Response>);
  @override
  _i4.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i4.Future<String>);
  @override
  _i4.Future<_i11.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i11.Uint8List>.value(_i11.Uint8List(0)))
          as _i4.Future<_i11.Uint8List>);
  @override
  _i4.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_2()))
          as _i4.Future<_i2.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}
